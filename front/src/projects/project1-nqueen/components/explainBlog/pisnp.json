{
  "title": "P vs NP",
  "content": [
    {
      "title": "서론",
      "text": [
        "\t해결하면 10억원이 넘는 상금을 받을 수 있는 수학 문제들이 있습니다. 하버드 대학교 수학자들이 만든 클레이 수학연구소에서 지정한 밀레니엄 문제가 바로 그것입니다. 그 중에서도 컴퓨터 분야에 종사하는 사람이라면 한번 쯤은 들어봤을 문제가 바로 P-NP문제입니다. 간단하게 말하면 P와 NP의 관계를 증명하는 문제인데 아래에서 짧고 간결하게 설명해드립니다."
      ]
    },
    {
      "title": "P, NP",
      "text": [
        "P란 polynomial의 약자로 다항식을 의미합니다. 어떤 문제가 P라는 것은 n의 크기를 갖는 문제를 푸는 데에 걸리는 시간을 n에 대한 다항식의 big O notation으로 나타낼 수 있다는 것을 의미합니다. 깊게 얘기하면 정의하고 설명해야될 용어가 많지만 간단하게 표현해서 쉬운 문제라고 볼 수 있습니다.",
        "NP는 non-deterministic polynomial의 약자입니다. 이는 비결정적 알고리즘으로 다항 시간 내에 해결할 수 있다는 의미입니다. 알고리즘에 어떤 난수를 생성하는 로직을 포함 시킬 경우에는 해당 알고리즘의 시간 복잡도를 n에 대한 다항식으로 나타낼 수 있다는 의미입니다. 쉽게 설명하기 위해 다항시간 내에 검산할 수 있는 문제라고 설명하는 경우도 있습니다. 난수를 생성하는 로직은 어떻게 보면 어떤 확률로 정답을 알려준다고도 볼 수 있고, 그러한 정답이 주어졌을 때 다항 시간 내에 정답이 맞다는 것을 검증할 수 있는 문제라고 볼 수 있는 겁니다."
      ]
    },
    {
      "title": "NP-hard, NP-complete",
      "text": [
        "NP-hard와 NP-complete는 최대한 간단하게 설명드리겠습니다. NP-hard 문제란 모든 NP문제를 대응시켜서 해결할 수 있는 문제입니다. 그러니까 하나의 NP-hard문제를 풀 수 있다면, 어떤 NP 문제를 가져와도 이 NP-hard 문제에 대응시켜서 해결할 수 있다는 겁니다.",
        "NP-complete는 NP-hard 문제이면서 NP에 포함되는 문제를 말합니다. NP-hard 문제란 모든 NP 문제를 해결할 수 있는 문제이므로 일반적으로 NP 문제보다 어려운 문제라고 볼 수 있습니다. 하지만 몇몇 NP-hard 문제는 NP에 포함됩니다.",
        "NP-hard와 NP-complete를 깊게 이해할 필요는 없습니다. 제가 이 두 분류를 소개시켜드리는 이유는 단 하나입니다. NP-complete 문제 중 단 하나만 해결한다면 모든 NP문제를 해결할 수 있다는 걸 전달하기 위해서입니다."
      ]
    },
    {
      "title": "P=NP ?",
      "text": [
        "다시 P vs NP 문제로 돌아와봅시다. 직관적으로 deterministic polynomial로 해결할 수 있는 문제는 non-deterministic polynomial로도 해결할 수 있을 겁니다. 즉 P는 NP에 포함되는 겁니다. 우리가 알아내야할 것은 NP는 과연 P에 포함될 지입니다.",
        "NP가 P에 포함된다는 것을 증명하려면 우리는 모든 NP문제가 polynomial하게 해결될 수 있다는 것을 증명해야합니다. 이때 우리는 앞서 NP-complete라는 개념을 배웠기 때문에 NP-complete문제 하나를 다항시간 내에 해결하는 것으로 모든 NP문제가 다항시간에 해결된다는 것을 증명할 수 있음을 알 수 있습니다.",
        "우측에 구현된 n-퀸 문제가 바로 NP-complete문제 중 하나입니다. 이 문제를 다항시간 안에 해결할 수 있다면 당신은 P=NP를 증명하는 겁니다!"
      ]
    }
  ]
}
